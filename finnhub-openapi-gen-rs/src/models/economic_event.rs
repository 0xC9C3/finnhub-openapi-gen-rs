/*
 * Finnhub API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct EconomicEvent {
    /// Actual release
    #[serde(rename = "actual", skip_serializing_if = "Option::is_none")]
    pub actual: Option<f32>,
    /// Previous release
    #[serde(rename = "prev", skip_serializing_if = "Option::is_none")]
    pub prev: Option<f32>,
    /// Country
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    /// Unit
    #[serde(rename = "unit", skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
    /// Estimate
    #[serde(rename = "estimate", skip_serializing_if = "Option::is_none")]
    pub estimate: Option<f32>,
    /// Event
    #[serde(rename = "event", skip_serializing_if = "Option::is_none")]
    pub event: Option<String>,
    /// Impact level
    #[serde(rename = "impact", skip_serializing_if = "Option::is_none")]
    pub impact: Option<String>,
    /// Release time
    #[serde(rename = "time", skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
}

impl EconomicEvent {
    pub fn new() -> EconomicEvent {
        EconomicEvent {
            actual: None,
            prev: None,
            country: None,
            unit: None,
            estimate: None,
            event: None,
            impact: None,
            time: None,
        }
    }
}


